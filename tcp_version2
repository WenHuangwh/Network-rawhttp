from struct import *

import struct

def verify_tcp_checksum(bytes_packet):
    ip_header_bytes = bytes_packet[:20]
    ip_header = struct.unpack('!BBHHHBBH4s4s', ip_header_bytes)
    ip_header_length = (ip_header[0] & 0x0F) * 4
    protocol = ip_header[6]

    if protocol != 6:  # TCP protocol number is 6
        print("Not a TCP packet.")
        return False

    tcp_header_length = ((bytes_packet[ip_header_length + 12] >> 4) & 0xF) * 4
    tcp_header_bytes = bytes_packet[ip_header_length:ip_header_length + tcp_header_length]
    tcp_data = bytes_packet[ip_header_length + tcp_header_length:]

    src_ip, dst_ip = ip_header[8], ip_header[9]
    tcp_length = len(tcp_header_bytes) + len(tcp_data)

    pseudo_header = src_ip + dst_ip + struct.pack('!BBH', 0, protocol, tcp_length)

    def add_16_bit_words(a, b):
        result = a + b
        return (result & 0xffff) + (result >> 16)

    def calculate_checksum(data):
        checksum = 0
        for i in range(0, len(data), 2):
            if i + 1 < len(data):
                word = (data[i] << 8) + data[i + 1]
            else:
                word = (data[i] << 8)
            checksum = add_16_bit_words(checksum, word)
        return ~checksum & 0xffff

    if len(tcp_data) % 2 != 0:
        tcp_data += b'\x00'

    checksum_data = pseudo_header + tcp_header_bytes[:16] + tcp_header_bytes[18:] + tcp_data
    calculated_checksum = calculate_checksum(checksum_data)

    original_checksum = (tcp_header_bytes[16] << 8) + tcp_header_bytes[17]
    is_valid = (calculated_checksum == original_checksum)

    print(f"Original TCP checksum: {original_checksum}")
    print(f"Calculated TCP checksum: {calculated_checksum}")
    return is_valid

def main():
    # The input header needs to be at least 20 bytes long for a valid IPv4 header. 
    hex_packet = "450000287e604000360692262d714518c0a801180050dbacf8605f3d816a2d61501000f498300000"
    # Convert hex string to bytes
    byte_packet = bytes.fromhex(hex_packet.replace(' ', ''))
    hex_packet1 = "45000040000040004006ec8ec0a80118cc2cc03cdbb90050841ecaee00000000b002ffffa5c10000020405b4010303060101080a6619b1e00000000004020000"
    byte_packet1 = bytes.fromhex(hex_packet1)
    hex_packet2 = "45000034ed14400035060a86cc2cc03cc0a801180050cb96687a50f4c1ff782a801100e37e1700000101080a12725403ad88d61a"
    byte_packet2 = bytes.fromhex(hex_packet2)

    hex_packet3 = "450000344c9440003406ac06cc2cc03cc0a801180050db7e28181f8070107bc1801000e3357d00000101080a15f5a100b0887b7c"
    byte_packet3 = bytes.fromhex(hex_packet3)

    print(verify_tcp_checksum(byte_packet))
    print(verify_tcp_checksum(byte_packet1))
    print(verify_tcp_checksum(byte_packet2))
    print(verify_tcp_checksum(byte_packet3))

   

    vm_byte_packet = b'E\x00\x00,\x8a/\x00\x00\x80\x06\xe1\t\xcc,\xc0<\xc0\xa8\x82\x81\x00P\xde<\xdf\xc4V<\x9e\xa2f?`\x12\xfa\xf0\xb4"\x00\x00\x02\x04\x05\xb4'
    print(verify_tcp_checksum(vm_byte_packet))
    print("The original tcp checksum from data: 46114")

    vm_byte_packet1 = b'E\x00\x00,\x8a\x8d\x00\x00\x80\x06\xe0\xab\xcc,\xc0<\xc0\xa8\x82\x81\x00P\xeb:"jA\xba\xc4\x9b\xbe\xcd`\x12\xfa\xf0\xfay\x00\x00\x02\x04\x05\xb4'
    print(verify_tcp_checksum(vm_byte_packet1))
    print("The original tcp checksum from data: 64121")





if __name__ == "__main__":
    main()