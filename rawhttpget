#!/usr/bin/env python3
import socket, sys, time
import os
from urllib.parse import urlparse
from struct import *
from random import randint
import time
from collections import namedtuple
from mySocket import RawSocket

SYN = 0x02   # 0b00000010
ACK = 0x10   # 0b00010000
SYN_ACK = 0x12   # 0b00010010
FIN = 0x01   # 0b00000001
FIN_ACK = 0x11   # 0b00010001
PSH_ACK = 0x18   # 0b00011000

# Success built connection
def getMyIpAddr(dest_ip_addr, dest_port):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect((dest_ip_addr, dest_port))
    my_ip_addr = s.getsockname()[0]
    s.close()
    return my_ip_addr

def tearDown(rawSocket, timeout=60):
    rawSocket._send_one(FIN, "")
    tcp_datagram = rawSocket.receive()
    print("3:")
    print(tcp_datagram)
    if tcp_datagram != None and tcp_datagram.flags == ACK:
        rawSocket._send_one(ACK, "")
        tcp_datagram = rawSocket.receive()
        print("4:")
        print(tcp_datagram)
        print("Connected")
        return True
    else:
        return False

def main():

    start = time.time()
    print("Welcome to rawhttpget program")
    url = sys.argv[1]

    # Split URL into host and path components
    parsed_url = urlparse(url)
    filename = parsed_url.path.split("/")[-1]  # Corrected line
    if not filename:
        filename = "index.html"  # Corrected line

    dest_hostname = parsed_url.hostname
    dest_ip_addr = socket.gethostbyname(dest_hostname)
    src_port = randint(49152, 65535)
    dest_port = 80
    src_ip_addr = getMyIpAddr(dest_ip_addr, dest_port)

    # handshake
    rawSocket = RawSocket(src_ip_addr, dest_ip_addr, src_port, dest_port)

    connection = rawSocket.handshake()

    if not connection:
        sys.exit(1)

    request = f"GET {parsed_url.path} HTTP/1.1\r\nHost: {parsed_url.hostname}\r\n\r\n"

    rawSocket.send(request)
    payload = rawSocket.receive_all()

    # Save the payload to a .log file
    with open("received_payload.log", "wb") as log_file:
        log_file.write(payload)

    print("Payload saved to received_payload.log")
    print(f"Time: {time.time() - start}")

    # rawSocket.close()

if __name__ == "__main__":
    main()