#!/usr/bin/env python3
import socket, sys, time
import os
from urllib.parse import urlparse
from struct import *
from random import randint
import time
from collections import namedtuple
from rawSocket import RawSocket


def get_my_ip(dest_ip_addr, dest_port):
    """
    Get the local IP address used to connect to the specified destination IP and port.

    Parameters
    ----------
    dest_ip_addr : str
        The destination IP address.
    dest_port : int
        The destination port.

    Returns
    -------
    str
        The local IP address used to connect to the specified destination.
    """
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect((dest_ip_addr, dest_port))
    my_ip_addr = s.getsockname()[0]
    s.close()
    return my_ip_addr

def generate_get_req(parsed_url):
    """
    Generate an HTTP GET request based on the given parsed URL.

    Parameters
    ----------
    parsed_url : ParseResult
        The parsed URL object.

    Returns
    -------
    str
        The generated HTTP GET request.
    """
    path = parsed_url.path
    hostname = parsed_url.hostname
    if path == "":
        path = "/"
    return f"GET {path} HTTP/1.1\r\nHost: {hostname}\r\nConnection: Close\r\n\r\n"

def main():
    """
    Main function that fetches a file from a given URL using a custom raw HTTP GET request.
    """
    start_time = time.time()
    print("Welcome to rawhttpget program")
    url = sys.argv[1]

    # Split URL into host and path components
    parsed_url = urlparse(url)
    filename = parsed_url.path.split("/")[-1]
    if not filename:
        filename = "index.html"

    # Setup ip address and port
    dest_hostname = parsed_url.hostname
    dest_ip_addr = socket.gethostbyname(dest_hostname)
    src_port = randint(49152, 65535)
    dest_port = 80
    src_ip_addr = get_my_ip(dest_ip_addr, dest_port)

    # Build raw socket
    rawSocket = RawSocket(src_ip_addr, dest_ip_addr, src_port, dest_port)
    
    # Handshake
    print("Connecting")
    connection = False
    while not connection and time.time() - start_time < 60:
        connection = rawSocket.handshake()

    if connection:
        print("Connected")
    else:
        print("Connection failed")
        return

    # Generat GET request and send
    request = generate_get_req(parsed_url)
    print(f"Sending request: {request}")
    rawSocket.send(request)

    # Receive data from server
    print("Receiving data")
    header, body = rawSocket.receive_all()

    # Check data
    if not b"HTTP/1.1 200" in header and not b"HTTP/1.0 200" in header:
        print("Please try again")
        return

    # Save the payload to a file
    with open(filename, "wb") as log_file:
        log_file.write(body)

    print(f"Payload saved to {filename}")
    print(f"Time: {time.time() - start_time}")

if __name__ == "__main__":
    main()
