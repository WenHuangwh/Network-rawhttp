#!/usr/bin/env python3
import socket, sys, time
import os
from urllib.parse import urlparse
from struct import *
from random import randint
import time
from collections import namedtuple
from mySocket import RawSocket


def getMyIpAddr(dest_ip_addr, dest_port):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect((dest_ip_addr, dest_port))
    my_ip_addr = s.getsockname()[0]
    s.close()
    return my_ip_addr


def main():

    start_time = time.time()
    print("Welcome to rawhttpget program")
    url = sys.argv[1]

    # Split URL into host and path components
    parsed_url = urlparse(url)
    filename = parsed_url.path.split("/")[-1]  # Corrected line
    if not filename:
        filename = "index.html"  # Corrected line

    dest_hostname = parsed_url.hostname
    dest_ip_addr = socket.gethostbyname(dest_hostname)
    src_port = randint(49152, 65535)
    dest_port = 80
    src_ip_addr = getMyIpAddr(dest_ip_addr, dest_port)

    # handshake
    rawSocket = RawSocket(src_ip_addr, dest_ip_addr, src_port, dest_port)
    
    connection = False

    while not connection and time.time() - start_time < 60:
        connection = rawSocket.handshake()

    if not connection:
        print("connection failed")
        sys.exit(1)

    request = f"GET {parsed_url.path} HTTP/1.1\r\nHost: {parsed_url.hostname}\r\nConnection: Keep-Alive\r\n\r\n"

    rawSocket.send(request)
    header, body = rawSocket.receive_all()

    if not b"HTTP/1.1 200" in header and not b"HTTP/1.0 200" in header:
        print("This is not HTTP 200, file error")
        return

    # Save the payload to a .log file
    with open(filename, "wb") as log_file:
        log_file.write(body)

    print("Payload saved to received_payload.log")
    print(f"Time: {time.time() - start_time}")

if __name__ == "__main__":
    main()