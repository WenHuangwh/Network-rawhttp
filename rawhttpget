#!/usr/bin/env python3
import socket, sys, time
import os
from urllib.parse import urlparse
from struct import *
from random import randint
import time
from collections import namedtuple
from mySocket import SendSocket, ReceiveSocket

SYN = 0x02   # 0b00000010
ACK = 0x10   # 0b00010000
SYN_ACK = 0x12   # 0b00010010
FIN = 0x01   # 0b00000001
FIN_ACK = 0x11   # 0b00010001
PSH_ACK = 0x18   # 0b00011000

# Success built connection
def getMyIpAddr(dest_ip_addr, dest_port):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect((dest_ip_addr, dest_port))
    my_ip_addr = s.getsockname()[0]
    s.close()
    return my_ip_addr

def handshake(sendSocket, receiveSocket, timeout=60):
    cur_time = time.time()
    while time.time() - cur_time <= timeout:
        # Send SYN
        sendSocket.send(SYN, "")
        tcp_datagram = receiveSocket.receive()
        print("1:")
        print(tcp_datagram)
        if tcp_datagram != None and tcp_datagram.flags == SYN_ACK:
            sendSocket.send(ACK, "")
            tcp_datagram = receiveSocket.receive()
            print("2:")
            print(tcp_datagram)
            print("Connected")
            return True
        else:
            continue
    print("Receive time expired")
    return False

def tearDown(sendSocket, receiveSocket, timeout=60):
    sendSocket.send(FIN, "")
    tcp_datagram = receiveSocket.receive()
    print("3:")
    print(tcp_datagram)
    if tcp_datagram != None and tcp_datagram.flags == ACK:
        sendSocket.send(ACK, "")
        tcp_datagram = receiveSocket.receive()
        print("4:")
        print(tcp_datagram)
        print("Connected")
        return True
    else:
        return False

def main():
    print("Welcome to rawhttpget program")
    url = sys.argv[1]

    # Split URL into host and path components
    parsed_url = urlparse(url)
    filename = url.split("/")[-1]
    if not filename:
        path = "index.html"

    dest_hostname = parsed_url.hostname
    dest_ip_addr = socket.gethostbyname(dest_hostname)
    src_port = randint(49152, 65535)
    dest_port = 80
    src_ip_addr = getMyIpAddr(dest_ip_addr, dest_port)

    # handshake
    sendSocket = SendSocket(src_ip_addr, dest_ip_addr, src_port, dest_port)
    receiveSocket = ReceiveSocket(dest_ip_addr, src_ip_addr, dest_port, src_port)

    connection = handshake(sendSocket, receiveSocket)
    tearDown(sendSocket, receiveSocket)


    if not connection:
        sys.exit(1)

    request = f"GET {parsed_url.path} HTTP/1.1\r\nHost: {parsed_url.hostname}\r\n\r\n"
    # sendSocket.send(PSH_ACK, request)
    # receiveSocket.receive()
    # sendSocket.send(PSH_ACK, request)
    # # receiveSocket.receive()
    # sendSocket.send(FIN, "")
    # sendSocket.send(FIN_ACK, "")

    

if __name__ == "__main__":
    main()